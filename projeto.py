# -*- coding: utf-8 -*-
"""Projeto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CzUE4_F_NJdsqdvTRTTMKurW6VhCqSTi

Primeiro Projeto
"""

# Manipulação dos Dados
import pandas as pd 

# Visuaização dos Dados
import missingno 
import matplotlib.pyplot as plt 
import seaborn as sns

# Carregando os dados
df = pd.read_csv("KAG_conversion_data.csv")

df.head() #Retornando as 5 primeiras linhas

df.tail() # Retorna as 5 ultimas lnhas

df.columns #Retorna o nome das colunas

df.index # Retorna nº de linhas do index (começa em, termina em, passos)

df.shape # Qtd Linhas e colunas
linhas, colunas = df.shape

print(linhas)
print(colunas)

df["Clicks"] # Retorna Série para coluna Clicks
ser_clicks = df["Clicks"] 

print(ser_clicks)

df.info() # Resumo do Conjunto de Dados

# Renomear colunas do Data Frame
df.rename(columns= {"ad_id": "id_anuncio", "xyz_campaign_id": "id_campanha", "fb_campaign_id": "id_fb_campanha", 
                    "age": "idade", "gender": "genero", "interest": "interesse", "Impressions": "numero_exibicoes", 
                    "Clicks": "cliques_no_anuncio", "Spent": "valor_pago_anuncio", "Total_Conversion": "conversao", "Approved_Conversion": "compras"}, inplace=True)

df.columns

# Informações Estatísticas
df.describe()

df.describe(include="all")

df.isnull().sum() # Contador de dados faltantes

missingno.matrix(df, figsize=(30,10)) # Visualizar em qual posiçao está os dados faltantes

# Outliers
plt.figure(figsize= (30,10)) # gráfico
df.boxplot()
plt.show()

# Duplicatas
df.duplicated() # Primeiras e Ultimas linhas se há ou não info duplicada

df[df.duplicated()] # Retorna com a linha(s) duplicadas

# Matriz de correlação (-1 / 1 = Existe correlação)
plt.figure(figsize=(12,10))
df.corr()

corr_matrix = df.corr()
sns.heatmap(corr_matrix, annot=True, cmap=plt.cm.Reds)

# Features 
df["id_campanha"].nunique() # Quantos valores únicos existem?

df["id_campanha"].unique() # Quais são os valores?

# Renomear as campanhas
df["id_campanha"].replace({ 916: "campanha_1", 936: "campanha_2", 1178: "camapanha_3"}, inplace=True)

# Quantos anúncios existem para cada campanha? 
plt.figure(figsize=(12,10))
sns.countplot(x="id_campanha", data=df)
plt.show()

# Campanha 3 tem o maior número de anúncios

# Qual campanha vendeu mais?
plt.figure(figsize=(12,10))
plt.bar(df["id_campanha"], df["compras"])
plt.ylabel("Compras")    # nomando o eixo Y
plt.xlabel("Campanha/Compras")   # nomando o eixo X
plt.show()

# Como a idade interfere em cada campanha?
df["idade"].nunique() # Quantos valores
df["idade"].unique() # Quais são os valores

plt.figure(figsize=(12,10))
sns.countplot(x="idade", data=df)
plt.show()

# Qual campanha performou melhor em qual idade?
plt.figure(figsize=(12,10))
tips = sns.load_dataset("tips")
sns.barplot(x=df["id_campanha"], y=df["compras"], hue=df["idade"], data=tips)
plt.show()

# Nível de Interesse por Sexo
plt.figure(figsize=(12,10))
sns.countplot(x="genero", data=df)
plt.show()

# Nível de Interesse Sexo/Camapanha
plt.figure(figsize=(12,10))
tips = sns.load_dataset("tips")
sns.barplot(x=df["id_campanha"], y=df["compras"], hue=df["genero"], data=tips)
plt.show()
